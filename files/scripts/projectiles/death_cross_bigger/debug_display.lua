dofile_once("data/scripts/lib/utilities.lua")
dofile_once("mods/purgatory/files/scripts/lib/utilities.lua")

local entity_id = GetUpdatedEntityID()
local x, y = EntityGetTransform(entity_id)

--Gui Functions
local id = 1
local function new_id()
    id = id + 1
    return id
end
gui = gui or GuiCreate()
GuiStartFrame(gui)

-- slider = slider or {}
-- slider.x = GuiSlider(gui, new_id(), 10, 70, "projectiles absorbed", slider.x, 0, 2000, 0, 1, "", 200)
-- variableStorageSetValue(entity_id, "INT", "projectiles_absorbed", math.ceil(slider.x))

--HELPER FUNCTIONS

--Takes the damage types from ProjectileComponent's object "damage_by_type" and turns them into a single string that can be written to a variable storage component
local function stringifyDamageTypesTable(dmg_by_type_table)
    local output_string = ""

    for damage_type, amount_of_damage in pairs(dmg_by_type_table) do
        output_string = output_string .. damage_type .. "=" .. amount_of_damage .. ","
    end

    output_string = string.sub(output_string, 1, -2)

    return output_string
end

--Takes a string generated by stringifyDamageTypesTable(dmg_by_type_table) and turns it back into a string indexed table akin to what you would get from ComponentObjectGetMembers(comp, obj)
local function destringifyDamageTypesString(dmg_by_type_string)
    local output_table = {}
    local list = splitStringOnCharIntoTable(dmg_by_type_string, ",")

    --list should now be something like { "ice=0", "electricity=0", ... }
    for i, v in ipairs(list) do
        local param_and_value = splitStringOnCharIntoTable(v, "=") --param_and_value should be like {"ice","0"}
        output_table[param_and_value[1]] = param_and_value[2]
    end

    return output_table
end


--Variable Storage Component Values
local power_level = variableStorageGetValue(entity_id, "FLOAT", "power_level")
local projectiles_absorbed = variableStorageGetValue(entity_id, "INT", "projectiles_absorbed")
local stored_damage = variableStorageGetValue(entity_id, "FLOAT", "stored_damage")
local stored_damage_by_type_string = variableStorageGetValue(entity_id, "STRING", "stored_damage_by_type")
local stored_damage_by_type_table = destringifyDamageTypesString(stored_damage_by_type_string)

GuiText(gui, 10, 260, "power_level = " .. tostring(power_level))
GuiText(gui, 10, 270, "projectiles_absorbed = " .. tostring(projectiles_absorbed))
GuiText(gui, 10, 280, "stored_damage = " .. tostring(stored_damage))



local y = 100
GuiText(gui, 10, y, "Damage By Types")
for damage_type, damage_amount in pairs(stored_damage_by_type_table) do
    y = y + 10
    GuiText(gui, 10, y, damage_type .. " = " .. damage_amount)
end

--Gravitational Distance and Strength Calculation
local scaling_factor = 2 * (power_level + 1) / 10
local distance_full = 256 * scaling_factor
local gravity_coeff = 256 * scaling_factor
local absorbtion_distance = 16 * scaling_factor


GuiText(gui, 10, 300, "distance_full = " .. tostring(distance_full))
GuiText(gui, 10, 310, "gravity_coeff = " .. tostring(gravity_coeff))
GuiText(gui, 10, 320, "absorbtion_distance = " .. tostring(absorbtion_distance))



if GuiImageButton(gui, new_id(), 10, 340, "Detonate", "mods/purgatory/files/ui_gfx/debug/button_0.png") then
    local projectile_comp = EntityGetFirstComponentIncludingDisabled(entity_id, "ProjectileComponent")
    ComponentSetValue2(projectile_comp, "lifetime", 5)
end
